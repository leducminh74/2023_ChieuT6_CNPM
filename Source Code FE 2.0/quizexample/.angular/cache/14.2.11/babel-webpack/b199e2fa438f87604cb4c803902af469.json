{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties';\nimport Watchdog from './watchdog';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\n\nexport default class EditorWatchdog extends Watchdog {\n  /**\n   * @param Editor The editor class.\n   * @param watchdogConfig The watchdog plugin configuration.\n   */\n  constructor(Editor, watchdogConfig = {}) {\n    super(watchdogConfig);\n    /**\n     * The current editor instance.\n     */\n\n    this._editor = null; // this._editorClass = Editor;\n\n    this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000); // Set default creator and destructor functions:\n\n    if (Editor) {\n      this._creator = (elementOrData, config) => Editor.create(elementOrData, config);\n    }\n\n    this._destructor = editor => editor.destroy();\n  }\n  /**\n   * The current editor instance.\n   */\n\n\n  get editor() {\n    return this._editor;\n  }\n  /**\n   * @internal\n   */\n\n\n  get _item() {\n    return this._editor;\n  }\n  /**\n   * Sets the function that is responsible for the editor creation.\n   * It expects a function that should return a promise.\n   *\n   * ```ts\n   * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n   * ```\n   */\n\n\n  setCreator(creator) {\n    this._creator = creator;\n  }\n  /**\n   * Sets the function that is responsible for the editor destruction.\n   * Overrides the default destruction function, which destroys only the editor instance.\n   * It expects a function that should return a promise or `undefined`.\n   *\n   * ```ts\n   * watchdog.setDestructor( editor => {\n   * \t// Do something before the editor is destroyed.\n   *\n   * \treturn editor\n   * \t\t.destroy()\n   * \t\t.then( () => {\n   * \t\t\t// Do something after the editor is destroyed.\n   * \t\t} );\n   * } );\n   * ```\n   */\n\n\n  setDestructor(destructor) {\n    this._destructor = destructor;\n  }\n  /**\n   * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n   * the state to `initializing`.\n   *\n   * @fires restart\n   */\n\n\n  _restart() {\n    return Promise.resolve().then(() => {\n      this.state = 'initializing';\n\n      this._fire('stateChange');\n\n      return this._destroy();\n    }).catch(err => {\n      console.error('An error happened during the editor destroying.', err);\n    }).then(() => {\n      if (typeof this._elementOrData === 'string') {\n        return this.create(this._data, this._config, this._config.context);\n      } else {\n        const updatedConfig = Object.assign({}, this._config, {\n          initialData: this._data\n        });\n        return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n      }\n    }).then(() => {\n      this._fire('restart');\n    });\n  }\n  /**\n   * Creates the editor instance and keeps it running, using the defined creator and destructor.\n   *\n   * @param elementOrData The editor source element or the editor data.\n   * @param config The editor configuration.\n   * @param context A context for the editor.\n   */\n\n\n  create(elementOrData = this._elementOrData, config = this._config, context) {\n    return Promise.resolve().then(() => {\n      super._startErrorHandling();\n\n      this._elementOrData = elementOrData; // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n      // when an error occurs in one of these editors, the watchdog will restart all of them.\n\n      this._config = this._cloneEditorConfiguration(config) || {};\n      this._config.context = context;\n      return this._creator(elementOrData, this._config);\n    }).then(editor => {\n      this._editor = editor;\n      editor.model.document.on('change:data', this._throttledSave);\n      this._lastDocumentVersion = editor.model.document.version;\n      this._data = this._getData();\n      this.state = 'ready';\n\n      this._fire('stateChange');\n    });\n  }\n  /**\n   * Destroys the watchdog and the current editor instance. It fires the callback\n   * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n   * It also sets the state to `destroyed`.\n   */\n\n\n  destroy() {\n    return Promise.resolve().then(() => {\n      this.state = 'destroyed';\n\n      this._fire('stateChange');\n\n      super.destroy();\n      return this._destroy();\n    });\n  }\n\n  _destroy() {\n    return Promise.resolve().then(() => {\n      this._stopErrorHandling(); // Save data if there is a remaining editor data change.\n\n\n      this._throttledSave.flush();\n\n      const editor = this._editor;\n      this._editor = null; // Remove the `change:data` listener before destroying the editor.\n      // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n      // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n\n      editor.model.document.off('change:data', this._throttledSave);\n      return this._destructor(editor);\n    });\n  }\n  /**\n   * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n   * the moment of the crash.\n   */\n\n\n  _save() {\n    const version = this._editor.model.document.version;\n\n    try {\n      this._data = this._getData();\n      this._lastDocumentVersion = version;\n    } catch (err) {\n      console.error(err, 'An error happened during restoring editor data. ' + 'Editor will be restored from the previously saved data.');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _setExcludedProperties(props) {\n    this._excludedProps = props;\n  }\n  /**\n   * Returns the editor data.\n   */\n\n\n  _getData() {\n    const data = {};\n\n    for (const rootName of this._editor.model.document.getRootNames()) {\n      data[rootName] = this._editor.data.get({\n        rootName\n      });\n    }\n\n    return data;\n  }\n  /**\n   * Traverses the error context and the current editor to find out whether these structures are connected\n   * to each other via properties.\n   *\n   * @internal\n   */\n\n\n  _isErrorComingFromThisItem(error) {\n    return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n  }\n  /**\n   * Clones the editor configuration.\n   */\n\n\n  _cloneEditorConfiguration(config) {\n    return cloneDeepWith(config, (value, key) => {\n      // Leave DOM references.\n      if (isElement(value)) {\n        return value;\n      }\n\n      if (key === 'context') {\n        return value;\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["areConnectedThroughProperties","Watchdog","throttle","cloneDeepWith","isElement","EditorWatchdog","constructor","Editor","watchdogConfig","_editor","_throttledSave","_save","bind","saveInterval","_creator","elementOrData","config","create","_destructor","editor","destroy","_item","setCreator","creator","setDestructor","destructor","_restart","Promise","resolve","then","state","_fire","_destroy","catch","err","console","error","_elementOrData","_data","_config","context","updatedConfig","Object","assign","initialData","_startErrorHandling","_cloneEditorConfiguration","model","document","on","_lastDocumentVersion","version","_getData","_stopErrorHandling","flush","off","_setExcludedProperties","props","_excludedProps","data","rootName","getRootNames","get","_isErrorComingFromThisItem","value","key"],"sources":["D:/FE-Workspace/quizexample/node_modules/@ckeditor/ckeditor5-watchdog/src/editorwatchdog.js"],"sourcesContent":["/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport areConnectedThroughProperties from './utils/areconnectedthroughproperties';\nimport Watchdog from './watchdog';\nimport { throttle, cloneDeepWith, isElement } from 'lodash-es';\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */\nexport default class EditorWatchdog extends Watchdog {\n    /**\n     * @param Editor The editor class.\n     * @param watchdogConfig The watchdog plugin configuration.\n     */\n    constructor(Editor, watchdogConfig = {}) {\n        super(watchdogConfig);\n        /**\n         * The current editor instance.\n         */\n        this._editor = null;\n        // this._editorClass = Editor;\n        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n        // Set default creator and destructor functions:\n        if (Editor) {\n            this._creator = ((elementOrData, config) => Editor.create(elementOrData, config));\n        }\n        this._destructor = editor => editor.destroy();\n    }\n    /**\n     * The current editor instance.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * @internal\n     */\n    get _item() {\n        return this._editor;\n    }\n    /**\n     * Sets the function that is responsible for the editor creation.\n     * It expects a function that should return a promise.\n     *\n     * ```ts\n     * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n     * ```\n     */\n    setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for the editor destruction.\n     * Overrides the default destruction function, which destroys only the editor instance.\n     * It expects a function that should return a promise or `undefined`.\n     *\n     * ```ts\n     * watchdog.setDestructor( editor => {\n     * \t// Do something before the editor is destroyed.\n     *\n     * \treturn editor\n     * \t\t.destroy()\n     * \t\t.then( () => {\n     * \t\t\t// Do something after the editor is destroyed.\n     * \t\t} );\n     * } );\n     * ```\n     */\n    setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n     * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n     * the state to `initializing`.\n     *\n     * @fires restart\n     */\n    _restart() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy();\n        })\n            .catch(err => {\n            console.error('An error happened during the editor destroying.', err);\n        })\n            .then(() => {\n            if (typeof this._elementOrData === 'string') {\n                return this.create(this._data, this._config, this._config.context);\n            }\n            else {\n                const updatedConfig = Object.assign({}, this._config, {\n                    initialData: this._data\n                });\n                return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n            }\n        })\n            .then(() => {\n            this._fire('restart');\n        });\n    }\n    /**\n     * Creates the editor instance and keeps it running, using the defined creator and destructor.\n     *\n     * @param elementOrData The editor source element or the editor data.\n     * @param config The editor configuration.\n     * @param context A context for the editor.\n     */\n    create(elementOrData = this._elementOrData, config = this._config, context) {\n        return Promise.resolve()\n            .then(() => {\n            super._startErrorHandling();\n            this._elementOrData = elementOrData;\n            // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n            // when an error occurs in one of these editors, the watchdog will restart all of them.\n            this._config = this._cloneEditorConfiguration(config) || {};\n            this._config.context = context;\n            return this._creator(elementOrData, this._config);\n        })\n            .then(editor => {\n            this._editor = editor;\n            editor.model.document.on('change:data', this._throttledSave);\n            this._lastDocumentVersion = editor.model.document.version;\n            this._data = this._getData();\n            this.state = 'ready';\n            this._fire('stateChange');\n        });\n    }\n    /**\n     * Destroys the watchdog and the current editor instance. It fires the callback\n     * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n     * It also sets the state to `destroyed`.\n     */\n    destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        });\n    }\n    _destroy() {\n        return Promise.resolve()\n            .then(() => {\n            this._stopErrorHandling();\n            // Save data if there is a remaining editor data change.\n            this._throttledSave.flush();\n            const editor = this._editor;\n            this._editor = null;\n            // Remove the `change:data` listener before destroying the editor.\n            // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n            // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n            editor.model.document.off('change:data', this._throttledSave);\n            return this._destructor(editor);\n        });\n    }\n    /**\n     * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n     * the moment of the crash.\n     */\n    _save() {\n        const version = this._editor.model.document.version;\n        try {\n            this._data = this._getData();\n            this._lastDocumentVersion = version;\n        }\n        catch (err) {\n            console.error(err, 'An error happened during restoring editor data. ' +\n                'Editor will be restored from the previously saved data.');\n        }\n    }\n    /**\n     * @internal\n     */\n    _setExcludedProperties(props) {\n        this._excludedProps = props;\n    }\n    /**\n     * Returns the editor data.\n     */\n    _getData() {\n        const data = {};\n        for (const rootName of this._editor.model.document.getRootNames()) {\n            data[rootName] = this._editor.data.get({ rootName });\n        }\n        return data;\n    }\n    /**\n     * Traverses the error context and the current editor to find out whether these structures are connected\n     * to each other via properties.\n     *\n     * @internal\n     */\n    _isErrorComingFromThisItem(error) {\n        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n    }\n    /**\n     * Clones the editor configuration.\n     */\n    _cloneEditorConfiguration(config) {\n        return cloneDeepWith(config, (value, key) => {\n            // Leave DOM references.\n            if (isElement(value)) {\n                return value;\n            }\n            if (key === 'context') {\n                return value;\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}