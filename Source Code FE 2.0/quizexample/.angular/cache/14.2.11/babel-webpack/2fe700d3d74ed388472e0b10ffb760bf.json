{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CsvConfigConsts = function () {\n  function CsvConfigConsts() {}\n\n  CsvConfigConsts.EOL = \"\\r\\n\";\n  CsvConfigConsts.BOM = \"\\ufeff\";\n  CsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\n  CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\n  CsvConfigConsts.DEFAULT_QUOTE = '\"';\n  CsvConfigConsts.DEFAULT_SHOW_TITLE = false;\n  CsvConfigConsts.DEFAULT_TITLE = 'My Report';\n  CsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\n  CsvConfigConsts.DEFAULT_SHOW_LABELS = false;\n  CsvConfigConsts.DEFAULT_USE_BOM = true;\n  CsvConfigConsts.DEFAULT_HEADER = [];\n  CsvConfigConsts.DEFAULT_NO_DOWNLOAD = false;\n  CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES = false;\n  return CsvConfigConsts;\n}();\n\nexports.CsvConfigConsts = CsvConfigConsts;\nexports.ConfigDefaults = {\n  filename: CsvConfigConsts.DEFAULT_FILENAME,\n  fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\n  quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\n  decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\n  showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\n  showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\n  title: CsvConfigConsts.DEFAULT_TITLE,\n  useBom: CsvConfigConsts.DEFAULT_USE_BOM,\n  headers: CsvConfigConsts.DEFAULT_HEADER,\n  noDownload: CsvConfigConsts.DEFAULT_NO_DOWNLOAD,\n  removeEmptyValues: CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES\n};\n\nvar ngxCsv = function () {\n  function ngxCsv(DataJSON, filename, options) {\n    this.csv = \"\";\n    var config = options || {};\n    this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\n    this._options = objectAssign({}, exports.ConfigDefaults, config);\n\n    if (this._options.filename) {\n      this._options.filename = filename;\n    }\n\n    this.generateCsv();\n  }\n  /**\r\n   * Generate and Download Csv\r\n   */\n\n\n  ngxCsv.prototype.generateCsv = function () {\n    if (this._options.useBom) {\n      this.csv += CsvConfigConsts.BOM;\n    }\n\n    if (this._options.showTitle) {\n      this.csv += this._options.title + '\\r\\n\\n';\n    }\n\n    this.getHeaders();\n    this.getBody();\n\n    if (this.csv == '') {\n      console.log(\"Invalid data\");\n      return;\n    }\n\n    if (this._options.noDownload) {\n      return this.csv;\n    }\n\n    var blob = new Blob([this.csv], {\n      \"type\": \"text/csv;charset=utf8;\"\n    });\n\n    if (navigator.msSaveBlob) {\n      var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n      navigator.msSaveBlob(blob, filename);\n    } else {\n      var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\n      var link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.setAttribute('visibility', 'hidden');\n      link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  /**\r\n   * Create Headers\r\n   */\n\n\n  ngxCsv.prototype.getHeaders = function () {\n    var _this = this;\n\n    if (this._options.headers.length > 0) {\n      var headers = this._options.headers;\n      var row = headers.reduce(function (headerRow, header) {\n        return headerRow + header + _this._options.fieldSeparator;\n      }, '');\n      row = row.slice(0, -1);\n      this.csv += row + CsvConfigConsts.EOL;\n    }\n  };\n  /**\r\n   * Create Body\r\n   */\n\n\n  ngxCsv.prototype.getBody = function () {\n    for (var i = 0; i < this.data.length; i++) {\n      var row = \"\";\n\n      for (var index in this.data[i]) {\n        row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\n      }\n\n      row = row.slice(0, -1);\n      this.csv += row + CsvConfigConsts.EOL;\n    }\n  };\n  /**\r\n   * Format Data\r\n   * @param {any} data\r\n   */\n\n\n  ngxCsv.prototype.formartData = function (data) {\n    if (this._options.removeEmptyValues && !data) {\n      return \"\";\n    }\n\n    if (this._options.decimalseparator === 'locale' && ngxCsv.isFloat(data)) {\n      return data.toLocaleString();\n    }\n\n    if (this._options.decimalseparator !== '.' && ngxCsv.isFloat(data)) {\n      return data.toString().replace('.', this._options.decimalseparator);\n    }\n\n    if (typeof data === 'string') {\n      data = data.replace(/\"/g, '\"\"');\n\n      if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\n        data = this._options.quoteStrings + data + this._options.quoteStrings;\n      }\n\n      return data;\n    }\n\n    if (typeof data === 'boolean') {\n      return data ? 'TRUE' : 'FALSE';\n    }\n\n    return data;\n  };\n  /**\r\n   * Get CSV String\r\n   */\n\n\n  ngxCsv.prototype.getCsv = function () {\n    return this.csv;\n  };\n  /**\r\n   * Check if is Float\r\n   * @param {any} input\r\n   */\n\n\n  ngxCsv.isFloat = function (input) {\n    return +input === input && (!isFinite(input) || Boolean(input % 1));\n  };\n\n  return ngxCsv;\n}();\n\nexports.ngxCsv = ngxCsv;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n/**\r\n * Convet to Object\r\n * @param {any} val\r\n */\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n/**\r\n * Assign data  to new Object\r\n * @param {any}   target\r\n * @param {any[]} ...source\r\n */\n\n\nfunction objectAssign(target) {\n  var source = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    source[_i - 1] = arguments[_i];\n  }\n\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      symbols = Object.getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","CsvConfigConsts","EOL","BOM","DEFAULT_FIELD_SEPARATOR","DEFAULT_DECIMAL_SEPARATOR","DEFAULT_QUOTE","DEFAULT_SHOW_TITLE","DEFAULT_TITLE","DEFAULT_FILENAME","DEFAULT_SHOW_LABELS","DEFAULT_USE_BOM","DEFAULT_HEADER","DEFAULT_NO_DOWNLOAD","DEFAULT_REMOVE_EMPTY_VALUES","ConfigDefaults","filename","fieldSeparator","quoteStrings","decimalseparator","showLabels","showTitle","title","useBom","headers","noDownload","removeEmptyValues","ngxCsv","DataJSON","options","csv","config","data","JSON","parse","_options","objectAssign","generateCsv","prototype","getHeaders","getBody","console","log","blob","Blob","navigator","msSaveBlob","replace","uri","encodeURI","link","document","createElement","href","URL","createObjectURL","setAttribute","download","body","appendChild","click","removeChild","_this","length","row","reduce","headerRow","header","slice","i","index","formartData","isFloat","toLocaleString","toString","indexOf","getCsv","input","isFinite","Boolean","hasOwnProperty","propIsEnumerable","propertyIsEnumerable","toObject","val","undefined","TypeError","target","source","_i","arguments","from","to","symbols","s","key","call","getOwnPropertySymbols"],"sources":["D:/FE-Workspace/quizexample/node_modules/ngx-csv/ngx-csv.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CsvConfigConsts = (function () {\r\n    function CsvConfigConsts() {\r\n    }\r\n    CsvConfigConsts.EOL = \"\\r\\n\";\r\n    CsvConfigConsts.BOM = \"\\ufeff\";\r\n    CsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\r\n    CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\r\n    CsvConfigConsts.DEFAULT_QUOTE = '\"';\r\n    CsvConfigConsts.DEFAULT_SHOW_TITLE = false;\r\n    CsvConfigConsts.DEFAULT_TITLE = 'My Report';\r\n    CsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\r\n    CsvConfigConsts.DEFAULT_SHOW_LABELS = false;\r\n    CsvConfigConsts.DEFAULT_USE_BOM = true;\r\n    CsvConfigConsts.DEFAULT_HEADER = [];\r\n    CsvConfigConsts.DEFAULT_NO_DOWNLOAD = false;\r\n    CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES = false;\r\n    return CsvConfigConsts;\r\n}());\r\nexports.CsvConfigConsts = CsvConfigConsts;\r\nexports.ConfigDefaults = {\r\n    filename: CsvConfigConsts.DEFAULT_FILENAME,\r\n    fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\r\n    quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\r\n    decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\r\n    showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\r\n    showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\r\n    title: CsvConfigConsts.DEFAULT_TITLE,\r\n    useBom: CsvConfigConsts.DEFAULT_USE_BOM,\r\n    headers: CsvConfigConsts.DEFAULT_HEADER,\r\n    noDownload: CsvConfigConsts.DEFAULT_NO_DOWNLOAD,\r\n    removeEmptyValues: CsvConfigConsts.DEFAULT_REMOVE_EMPTY_VALUES\r\n};\r\nvar ngxCsv = (function () {\r\n    function ngxCsv(DataJSON, filename, options) {\r\n        this.csv = \"\";\r\n        var config = options || {};\r\n        this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\r\n        this._options = objectAssign({}, exports.ConfigDefaults, config);\r\n        if (this._options.filename) {\r\n            this._options.filename = filename;\r\n        }\r\n        this.generateCsv();\r\n    }\r\n    /**\r\n     * Generate and Download Csv\r\n     */\r\n    ngxCsv.prototype.generateCsv = function () {\r\n        if (this._options.useBom) {\r\n            this.csv += CsvConfigConsts.BOM;\r\n        }\r\n        if (this._options.showTitle) {\r\n            this.csv += this._options.title + '\\r\\n\\n';\r\n        }\r\n        this.getHeaders();\r\n        this.getBody();\r\n        if (this.csv == '') {\r\n            console.log(\"Invalid data\");\r\n            return;\r\n        }\r\n        if (this._options.noDownload) {\r\n            return this.csv;\r\n        }\r\n        var blob = new Blob([this.csv], { \"type\": \"text/csv;charset=utf8;\" });\r\n        if (navigator.msSaveBlob) {\r\n            var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\r\n            var link = document.createElement(\"a\");\r\n            link.href = URL.createObjectURL(blob);\r\n            link.setAttribute('visibility', 'hidden');\r\n            link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    };\r\n    /**\r\n     * Create Headers\r\n     */\r\n    ngxCsv.prototype.getHeaders = function () {\r\n        var _this = this;\r\n        if (this._options.headers.length > 0) {\r\n            var headers = this._options.headers;\r\n            var row = headers.reduce(function (headerRow, header) {\r\n                return headerRow + header + _this._options.fieldSeparator;\r\n            }, '');\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Create Body\r\n     */\r\n    ngxCsv.prototype.getBody = function () {\r\n        for (var i = 0; i < this.data.length; i++) {\r\n            var row = \"\";\r\n            for (var index in this.data[i]) {\r\n                row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\r\n            }\r\n            row = row.slice(0, -1);\r\n            this.csv += row + CsvConfigConsts.EOL;\r\n        }\r\n    };\r\n    /**\r\n     * Format Data\r\n     * @param {any} data\r\n     */\r\n    ngxCsv.prototype.formartData = function (data) {\r\n        if (this._options.removeEmptyValues && !data) {\r\n            return \"\";\r\n        }\r\n        if (this._options.decimalseparator === 'locale' && ngxCsv.isFloat(data)) {\r\n            return data.toLocaleString();\r\n        }\r\n        if (this._options.decimalseparator !== '.' && ngxCsv.isFloat(data)) {\r\n            return data.toString().replace('.', this._options.decimalseparator);\r\n        }\r\n        if (typeof data === 'string') {\r\n            data = data.replace(/\"/g, '\"\"');\r\n            if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\r\n                data = this._options.quoteStrings + data + this._options.quoteStrings;\r\n            }\r\n            return data;\r\n        }\r\n        if (typeof data === 'boolean') {\r\n            return data ? 'TRUE' : 'FALSE';\r\n        }\r\n        return data;\r\n    };\r\n    /**\r\n     * Get CSV String\r\n     */\r\n    ngxCsv.prototype.getCsv = function () {\r\n        return this.csv;\r\n    };\r\n    /**\r\n     * Check if is Float\r\n     * @param {any} input\r\n     */\r\n    ngxCsv.isFloat = function (input) {\r\n        return +input === input && (!isFinite(input) || Boolean(input % 1));\r\n    };\r\n    return ngxCsv;\r\n}());\r\nexports.ngxCsv = ngxCsv;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\r\n/**\r\n * Convet to Object\r\n * @param {any} val\r\n */\r\nfunction toObject(val) {\r\n    if (val === null || val === undefined) {\r\n        throw new TypeError('Object.assign cannot be called with null or undefined');\r\n    }\r\n    return Object(val);\r\n}\r\n/**\r\n * Assign data  to new Object\r\n * @param {any}   target\r\n * @param {any[]} ...source\r\n */\r\nfunction objectAssign(target) {\r\n    var source = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        source[_i - 1] = arguments[_i];\r\n    }\r\n    var from;\r\n    var to = toObject(target);\r\n    var symbols;\r\n    for (var s = 1; s < arguments.length; s++) {\r\n        from = Object(arguments[s]);\r\n        for (var key in from) {\r\n            if (hasOwnProperty.call(from, key)) {\r\n                to[key] = from[key];\r\n            }\r\n        }\r\n        if (Object.getOwnPropertySymbols) {\r\n            symbols = Object.getOwnPropertySymbols(from);\r\n            for (var i = 0; i < symbols.length; i++) {\r\n                if (propIsEnumerable.call(from, symbols[i])) {\r\n                    to[symbols[i]] = from[symbols[i]];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return to;\r\n}\r\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,eAAe,GAAI,YAAY;EAC/B,SAASA,eAAT,GAA2B,CAC1B;;EACDA,eAAe,CAACC,GAAhB,GAAsB,MAAtB;EACAD,eAAe,CAACE,GAAhB,GAAsB,QAAtB;EACAF,eAAe,CAACG,uBAAhB,GAA0C,GAA1C;EACAH,eAAe,CAACI,yBAAhB,GAA4C,GAA5C;EACAJ,eAAe,CAACK,aAAhB,GAAgC,GAAhC;EACAL,eAAe,CAACM,kBAAhB,GAAqC,KAArC;EACAN,eAAe,CAACO,aAAhB,GAAgC,WAAhC;EACAP,eAAe,CAACQ,gBAAhB,GAAmC,WAAnC;EACAR,eAAe,CAACS,mBAAhB,GAAsC,KAAtC;EACAT,eAAe,CAACU,eAAhB,GAAkC,IAAlC;EACAV,eAAe,CAACW,cAAhB,GAAiC,EAAjC;EACAX,eAAe,CAACY,mBAAhB,GAAsC,KAAtC;EACAZ,eAAe,CAACa,2BAAhB,GAA8C,KAA9C;EACA,OAAOb,eAAP;AACH,CAjBsB,EAAvB;;AAkBAF,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACgB,cAAR,GAAyB;EACrBC,QAAQ,EAAEf,eAAe,CAACQ,gBADL;EAErBQ,cAAc,EAAEhB,eAAe,CAACG,uBAFX;EAGrBc,YAAY,EAAEjB,eAAe,CAACK,aAHT;EAIrBa,gBAAgB,EAAElB,eAAe,CAACI,yBAJb;EAKrBe,UAAU,EAAEnB,eAAe,CAACS,mBALP;EAMrBW,SAAS,EAAEpB,eAAe,CAACM,kBANN;EAOrBe,KAAK,EAAErB,eAAe,CAACO,aAPF;EAQrBe,MAAM,EAAEtB,eAAe,CAACU,eARH;EASrBa,OAAO,EAAEvB,eAAe,CAACW,cATJ;EAUrBa,UAAU,EAAExB,eAAe,CAACY,mBAVP;EAWrBa,iBAAiB,EAAEzB,eAAe,CAACa;AAXd,CAAzB;;AAaA,IAAIa,MAAM,GAAI,YAAY;EACtB,SAASA,MAAT,CAAgBC,QAAhB,EAA0BZ,QAA1B,EAAoCa,OAApC,EAA6C;IACzC,KAAKC,GAAL,GAAW,EAAX;IACA,IAAIC,MAAM,GAAGF,OAAO,IAAI,EAAxB;IACA,KAAKG,IAAL,GAAY,OAAOJ,QAAP,IAAmB,QAAnB,GAA8BK,IAAI,CAACC,KAAL,CAAWN,QAAX,CAA9B,GAAqDA,QAAjE;IACA,KAAKO,QAAL,GAAgBC,YAAY,CAAC,EAAD,EAAKrC,OAAO,CAACgB,cAAb,EAA6BgB,MAA7B,CAA5B;;IACA,IAAI,KAAKI,QAAL,CAAcnB,QAAlB,EAA4B;MACxB,KAAKmB,QAAL,CAAcnB,QAAd,GAAyBA,QAAzB;IACH;;IACD,KAAKqB,WAAL;EACH;EACD;AACJ;AACA;;;EACIV,MAAM,CAACW,SAAP,CAAiBD,WAAjB,GAA+B,YAAY;IACvC,IAAI,KAAKF,QAAL,CAAcZ,MAAlB,EAA0B;MACtB,KAAKO,GAAL,IAAY7B,eAAe,CAACE,GAA5B;IACH;;IACD,IAAI,KAAKgC,QAAL,CAAcd,SAAlB,EAA6B;MACzB,KAAKS,GAAL,IAAY,KAAKK,QAAL,CAAcb,KAAd,GAAsB,QAAlC;IACH;;IACD,KAAKiB,UAAL;IACA,KAAKC,OAAL;;IACA,IAAI,KAAKV,GAAL,IAAY,EAAhB,EAAoB;MAChBW,OAAO,CAACC,GAAR,CAAY,cAAZ;MACA;IACH;;IACD,IAAI,KAAKP,QAAL,CAAcV,UAAlB,EAA8B;MAC1B,OAAO,KAAKK,GAAZ;IACH;;IACD,IAAIa,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,KAAKd,GAAN,CAAT,EAAqB;MAAE,QAAQ;IAAV,CAArB,CAAX;;IACA,IAAIe,SAAS,CAACC,UAAd,EAA0B;MACtB,IAAI9B,QAAQ,GAAG,KAAKmB,QAAL,CAAcnB,QAAd,CAAuB+B,OAAvB,CAA+B,IAA/B,EAAqC,GAArC,IAA4C,MAA3D;MACAF,SAAS,CAACC,UAAV,CAAqBH,IAArB,EAA2B3B,QAA3B;IACH,CAHD,MAIK;MACD,IAAIgC,GAAG,GAAG,uCAAuCC,SAAS,CAAC,KAAKnB,GAAN,CAA1D;MACA,IAAIoB,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;MACAF,IAAI,CAACG,IAAL,GAAYC,GAAG,CAACC,eAAJ,CAAoBZ,IAApB,CAAZ;MACAO,IAAI,CAACM,YAAL,CAAkB,YAAlB,EAAgC,QAAhC;MACAN,IAAI,CAACO,QAAL,GAAgB,KAAKtB,QAAL,CAAcnB,QAAd,CAAuB+B,OAAvB,CAA+B,IAA/B,EAAqC,GAArC,IAA4C,MAA5D;MACAI,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,IAA1B;MACAA,IAAI,CAACU,KAAL;MACAT,QAAQ,CAACO,IAAT,CAAcG,WAAd,CAA0BX,IAA1B;IACH;EACJ,CA/BD;EAgCA;AACJ;AACA;;;EACIvB,MAAM,CAACW,SAAP,CAAiBC,UAAjB,GAA8B,YAAY;IACtC,IAAIuB,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAK3B,QAAL,CAAcX,OAAd,CAAsBuC,MAAtB,GAA+B,CAAnC,EAAsC;MAClC,IAAIvC,OAAO,GAAG,KAAKW,QAAL,CAAcX,OAA5B;MACA,IAAIwC,GAAG,GAAGxC,OAAO,CAACyC,MAAR,CAAe,UAAUC,SAAV,EAAqBC,MAArB,EAA6B;QAClD,OAAOD,SAAS,GAAGC,MAAZ,GAAqBL,KAAK,CAAC3B,QAAN,CAAelB,cAA3C;MACH,CAFS,EAEP,EAFO,CAAV;MAGA+C,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;MACA,KAAKtC,GAAL,IAAYkC,GAAG,GAAG/D,eAAe,CAACC,GAAlC;IACH;EACJ,CAVD;EAWA;AACJ;AACA;;;EACIyB,MAAM,CAACW,SAAP,CAAiBE,OAAjB,GAA2B,YAAY;IACnC,KAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKrC,IAAL,CAAU+B,MAA9B,EAAsCM,CAAC,EAAvC,EAA2C;MACvC,IAAIL,GAAG,GAAG,EAAV;;MACA,KAAK,IAAIM,KAAT,IAAkB,KAAKtC,IAAL,CAAUqC,CAAV,CAAlB,EAAgC;QAC5BL,GAAG,IAAI,KAAKO,WAAL,CAAiB,KAAKvC,IAAL,CAAUqC,CAAV,EAAaC,KAAb,CAAjB,IAAwC,KAAKnC,QAAL,CAAclB,cAA7D;MACH;;MACD+C,GAAG,GAAGA,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;MACA,KAAKtC,GAAL,IAAYkC,GAAG,GAAG/D,eAAe,CAACC,GAAlC;IACH;EACJ,CATD;EAUA;AACJ;AACA;AACA;;;EACIyB,MAAM,CAACW,SAAP,CAAiBiC,WAAjB,GAA+B,UAAUvC,IAAV,EAAgB;IAC3C,IAAI,KAAKG,QAAL,CAAcT,iBAAd,IAAmC,CAACM,IAAxC,EAA8C;MAC1C,OAAO,EAAP;IACH;;IACD,IAAI,KAAKG,QAAL,CAAchB,gBAAd,KAAmC,QAAnC,IAA+CQ,MAAM,CAAC6C,OAAP,CAAexC,IAAf,CAAnD,EAAyE;MACrE,OAAOA,IAAI,CAACyC,cAAL,EAAP;IACH;;IACD,IAAI,KAAKtC,QAAL,CAAchB,gBAAd,KAAmC,GAAnC,IAA0CQ,MAAM,CAAC6C,OAAP,CAAexC,IAAf,CAA9C,EAAoE;MAChE,OAAOA,IAAI,CAAC0C,QAAL,GAAgB3B,OAAhB,CAAwB,GAAxB,EAA6B,KAAKZ,QAAL,CAAchB,gBAA3C,CAAP;IACH;;IACD,IAAI,OAAOa,IAAP,KAAgB,QAApB,EAA8B;MAC1BA,IAAI,GAAGA,IAAI,CAACe,OAAL,CAAa,IAAb,EAAmB,IAAnB,CAAP;;MACA,IAAI,KAAKZ,QAAL,CAAcjB,YAAd,IAA8Bc,IAAI,CAAC2C,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAnD,IAAwD3C,IAAI,CAAC2C,OAAL,CAAa,IAAb,IAAqB,CAAC,CAA9E,IAAmF3C,IAAI,CAAC2C,OAAL,CAAa,IAAb,IAAqB,CAAC,CAA7G,EAAgH;QAC5G3C,IAAI,GAAG,KAAKG,QAAL,CAAcjB,YAAd,GAA6Bc,IAA7B,GAAoC,KAAKG,QAAL,CAAcjB,YAAzD;MACH;;MACD,OAAOc,IAAP;IACH;;IACD,IAAI,OAAOA,IAAP,KAAgB,SAApB,EAA+B;MAC3B,OAAOA,IAAI,GAAG,MAAH,GAAY,OAAvB;IACH;;IACD,OAAOA,IAAP;EACH,CArBD;EAsBA;AACJ;AACA;;;EACIL,MAAM,CAACW,SAAP,CAAiBsC,MAAjB,GAA0B,YAAY;IAClC,OAAO,KAAK9C,GAAZ;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIH,MAAM,CAAC6C,OAAP,GAAiB,UAAUK,KAAV,EAAiB;IAC9B,OAAO,CAACA,KAAD,KAAWA,KAAX,KAAqB,CAACC,QAAQ,CAACD,KAAD,CAAT,IAAoBE,OAAO,CAACF,KAAK,GAAG,CAAT,CAAhD,CAAP;EACH,CAFD;;EAGA,OAAOlD,MAAP;AACH,CAjHa,EAAd;;AAkHA5B,OAAO,CAAC4B,MAAR,GAAiBA,MAAjB;AACA,IAAIqD,cAAc,GAAGnF,MAAM,CAACyC,SAAP,CAAiB0C,cAAtC;AACA,IAAIC,gBAAgB,GAAGpF,MAAM,CAACyC,SAAP,CAAiB4C,oBAAxC;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EACnB,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKC,SAA5B,EAAuC;IACnC,MAAM,IAAIC,SAAJ,CAAc,uDAAd,CAAN;EACH;;EACD,OAAOzF,MAAM,CAACuF,GAAD,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAAShD,YAAT,CAAsBmD,MAAtB,EAA8B;EAC1B,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAAC3B,MAAhC,EAAwC0B,EAAE,EAA1C,EAA8C;IAC1CD,MAAM,CAACC,EAAE,GAAG,CAAN,CAAN,GAAiBC,SAAS,CAACD,EAAD,CAA1B;EACH;;EACD,IAAIE,IAAJ;EACA,IAAIC,EAAE,GAAGT,QAAQ,CAACI,MAAD,CAAjB;EACA,IAAIM,OAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAAC3B,MAA9B,EAAsC+B,CAAC,EAAvC,EAA2C;IACvCH,IAAI,GAAG9F,MAAM,CAAC6F,SAAS,CAACI,CAAD,CAAV,CAAb;;IACA,KAAK,IAAIC,GAAT,IAAgBJ,IAAhB,EAAsB;MAClB,IAAIX,cAAc,CAACgB,IAAf,CAAoBL,IAApB,EAA0BI,GAA1B,CAAJ,EAAoC;QAChCH,EAAE,CAACG,GAAD,CAAF,GAAUJ,IAAI,CAACI,GAAD,CAAd;MACH;IACJ;;IACD,IAAIlG,MAAM,CAACoG,qBAAX,EAAkC;MAC9BJ,OAAO,GAAGhG,MAAM,CAACoG,qBAAP,CAA6BN,IAA7B,CAAV;;MACA,KAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,OAAO,CAAC9B,MAA5B,EAAoCM,CAAC,EAArC,EAAyC;QACrC,IAAIY,gBAAgB,CAACe,IAAjB,CAAsBL,IAAtB,EAA4BE,OAAO,CAACxB,CAAD,CAAnC,CAAJ,EAA6C;UACzCuB,EAAE,CAACC,OAAO,CAACxB,CAAD,CAAR,CAAF,GAAiBsB,IAAI,CAACE,OAAO,CAACxB,CAAD,CAAR,CAArB;QACH;MACJ;IACJ;EACJ;;EACD,OAAOuB,EAAP;AACH"},"metadata":{},"sourceType":"script"}